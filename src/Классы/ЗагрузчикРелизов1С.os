// ----------------------------------------------------------
// This Source Code Form is subject to the terms of the
// Mozilla Public License, v.2.0. If a copy of the MPL
// was not distributed with this file, You can obtain one
// at http://mozilla.org/MPL/2.0/.
// ----------------------------------------------------------

Перем МенеджерОбработкиДанных;  // ВнешняяОбработкаОбъект - обработка-менеджер, вызвавшая данный обработчик
Перем Идентификатор;            // Строка                 - идентификатор обработчика, заданный обработкой-менеджером
Перем ПараметрыОбработки;       // Структура              - параметры обработки
Перем Лог;

Перем ИмяПользователя;          // Строка                 - имя пользователя сайта релизов 1С
Перем ПарольПользователя;       // Строка                 - пароль пользователя сайта релизов 1С

Перем ФильтрПриложений;         // Массив(Строка)         - фильтр имен приложений
Перем ФильтрВерсий;             // Массив(Строка)         - фильтр номеров версий
Перем ФильтрВерсийНачинаяСДаты; // Дата                   - фильтр по начальной дате версии (включая)
Перем ФильтрВерсийДоДаты;       // Дата                   - фильтр по последней дате версии (включая)

Перем КаталогДляСохранения;     // Строка                 - каталог для загрузки релизов 1С
Перем РаспаковыватьEFD;         // Булево                 - Истина - если загруженный архив содержит упакованный шаблон
                                //                          конфигурации (содержит файл 1cv8.efd),
                                //                          то он будет распакован
Перем КаталогДляРаспаковкиEFD;  // Строка                 - каталог для распаковки шаблона конфигурации
Перем ФайлыДляРаспаковкиEFD;    // Массив(Строка)         - список файлов для распаковки из архива EFD дистрибутива
                                //                          конфигурации, если не указан, то распаковываются все файлы
Перем УдалитьПослеРаспаковкиEFD;// Булево                 - Истина - после рапаковки загруженный архив будет удален

Перем НакопленныеДанные;        // Массив(Структура)      - результаты обработки данных

#Область ПрограммныйИнтерфейс

// Функция - признак возможности обработки, принимать входящие данные
// 
// Возвращаемое значение:
//	Булево - Истина - обработка может принимать входящие данные для обработки;
//	         Ложь - обработка не принимает входящие данные;
//
Функция ПринимаетДанные() Экспорт
	
	Возврат Ложь;
	
КонецФункции // ПринимаетДанные()

// Функция - признак возможности обработки, возвращать обработанные данные
// 
// Возвращаемое значение:
//	Булево - Истина - обработка может возвращать обработанные данные;
//	         Ложь - обработка не возвращает данные;
//
Функция ВозвращаетДанные() Экспорт
	
	Возврат Истина;
	
КонецФункции // ВозвращаетДанные()

// Функция - возвращает список параметров обработки
// 
// Возвращаемое значение:
//	Структура                                - структура входящих параметров обработки
//      *Тип                    - Строка         - тип параметра
//      *Обязательный           - Булево         - Истина - параметр обязателен
//      *ЗначениеПоУмолчанию    - Произвольный   - значение параметра по умолчанию
//      *Описание               - Строка         - описание параметра
//
Функция ОписаниеПараметров() Экспорт
	
	Параметры = Новый Структура();
	
	ДобавитьОписаниеПараметра(Параметры,
	                          "ИмяПользователя",
	                          "Строка",
	                          Истина,
	                          "",
	                          "Имя пользователя сайта релизов 1С");
	
	ДобавитьОписаниеПараметра(Параметры,
	                          "ПарольПользователя",
	                          "Строка",
	                          Истина,
	                          "",
	                          "Пароль пользователя сайта релизов 1С");
	
	ДобавитьОписаниеПараметра(Параметры,
	                          "ФильтрПриложений",
	                          "Массив",
	                          Ложь,
	                          "",
	                          "Фильтр имен приложений");
	
	ДобавитьОписаниеПараметра(Параметры,
	                          "ФильтрВерсий",
	                          "Массив",
	                          Ложь,
	                          "",
	                          "Фильтр номеров версий");

	ДобавитьОписаниеПараметра(Параметры,
	                          "ФильтрВерсийНачинаяСДаты",
	                          "Дата",
	                          Ложь,
	                          "",
	                          "Фильтр по начальной дате версии (включая)");

	ДобавитьОписаниеПараметра(Параметры,
	                          "ФильтрВерсийДоДаты",
	                          "Дата",
	                          Ложь,
	                          "",
	                          "Фильтр по последней дате версии (включая)");

	ДобавитьОписаниеПараметра(Параметры,
	                          "КаталогДляСохранения",
	                          "Строка",
	                          Истина,
	                          "",
	                          "каталог для загрузки релизов 1С");

	ДобавитьОписаниеПараметра(Параметры,
	                          "РаспаковыватьEFD",
	                          "Булево",
	                          Ложь,
	                          "",
	                          "Истина - если загруженный архив содержит упакованный шаблон
	                          |конфигурации (содержит файл 1cv8.efd), то он будет распакован");

	ДобавитьОписаниеПараметра(Параметры,
	                          "КаталогДляРаспаковкиEFD",
	                          "Строка",
	                          Ложь,
	                          "",
	                          "каталог для распаковки шаблона конфигурации");

	ДобавитьОписаниеПараметра(Параметры,
	                          "ФайлыДляРаспаковкиEFD",
	                          "Массив",
	                          Ложь,
	                          "",
	                          "список файлов для распаковки из архива EFD дистрибутива конфигурации,
	                          |если не указан, то распаковываются все файлы");

	ДобавитьОписаниеПараметра(Параметры,
	                          "УдалитьПослеРаспаковкиEFD",
	                          "Булево",
	                          Ложь,
	                          "",
	                          "Истина - после рапаковки загруженный архив будет удален");

	Возврат Параметры;
	
КонецФункции // ОписаниеПараметров()

// Функция - Возвращает обработку - менеджер
// 
// Возвращаемое значение:
//	ВнешняяОбработкаОбъект - обработка-менеджер
//
Функция МенеджерОбработкиДанных() Экспорт
	
	Возврат МенеджерОбработкиДанных;
	
КонецФункции // МенеджерОбработкиДанных()

// Процедура - Устанавливает обработку - менеджер
//
// Параметры:
//	НовыйМенеджерОбработкиДанных      - ВнешняяОбработкаОбъект - обработка-менеджер
//
Процедура УстановитьМенеджерОбработкиДанных(Знач НовыйМенеджерОбработкиДанных) Экспорт
	
	МенеджерОбработкиДанных = НовыйМенеджерОбработкиДанных;
	
КонецПроцедуры // УстановитьМенеджерОбработкиДанных()

// Функция - Возвращает идентификатор обработчика
// 
// Возвращаемое значение:
//	Строка - идентификатор обработчика
//
Функция Идентификатор() Экспорт
	
	Возврат Идентификатор;
	
КонецФункции // Идентификатор()

// Процедура - Устанавливает идентификатор обработчика
//
// Параметры:
//	НовыйИдентификатор      - Строка - новый идентификатор обработчика
//
Процедура УстановитьИдентификатор(Знач НовыйИдентификатор) Экспорт
	
	Идентификатор = НовыйИдентификатор;
	
КонецПроцедуры // УстановитьИдентификатор()

// Функция - Возвращает значения параметров обработки
// 
// Возвращаемое значение:
//	Структура - параметры обработки
//
Функция ПараметрыОбработкиДанных() Экспорт
	
	Возврат ПараметрыОбработки;
	
КонецФункции // ПараметрыОбработкиДанных()

// Процедура - Устанавливает значения параметров обработки данных
//
// Параметры:
//	НовыеПараметры      - Структура     - значения параметров обработки
//
Процедура УстановитьПараметрыОбработкиДанных(Знач НовыеПараметры) Экспорт
	
	ПараметрыОбработки = НовыеПараметры;
	
	ИмяПользователя = "";
	Если ПараметрыОбработки.Свойство("ИмяПользователя") Тогда
		ИмяПользователя = ПараметрыОбработки.ИмяПользователя;
	КонецЕсли;

	ПарольПользователя = "";
	Если ПараметрыОбработки.Свойство("ПарольПользователя") Тогда
		ПарольПользователя = ПараметрыОбработки.ПарольПользователя;
	КонецЕсли;

	ФильтрПриложений = Новый Массив();
	Если ПараметрыОбработки.Свойство("ФильтрПриложений") Тогда
		Если ТипЗнч(ПараметрыОбработки.ФильтрПриложений) = Тип("Массив") Тогда
			ФильтрПриложений = ПараметрыОбработки.ФильтрПриложений;
		Иначе
			ФильтрПриложений = СтрРазделить(ПараметрыОбработки.ФильтрПриложений, "|");
		КонецЕсли;
	КонецЕсли;

	ФильтрВерсий = Новый Массив();
	Если ПараметрыОбработки.Свойство("ФильтрВерсий") Тогда
		Если ТипЗнч(ПараметрыОбработки.ФильтрВерсий) = Тип("Массив") Тогда
			ФильтрВерсий = ПараметрыОбработки.ФильтрВерсий;
		Иначе
			ФильтрВерсий = СтрРазделить(ПараметрыОбработки.ФильтрПриложений, "|");
		КонецЕсли;
	КонецЕсли;

	ФильтрВерсийНачинаяСДаты = "";
	Если ПараметрыОбработки.Свойство("ФильтрВерсийНачинаяСДаты") Тогда
		ФильтрВерсийНачинаяСДаты = ПараметрыОбработки.ФильтрВерсийНачинаяСДаты;
	КонецЕсли;

	ФильтрВерсийДоДаты = "";
	Если ПараметрыОбработки.Свойство("ФильтрВерсийДоДаты") Тогда
		ФильтрВерсийДоДаты = ПараметрыОбработки.ФильтрВерсийДоДаты;
	КонецЕсли;

	КаталогДляСохранения = "";
	Если ПараметрыОбработки.Свойство("КаталогДляСохранения") Тогда
		КаталогДляСохранения = ПараметрыОбработки.КаталогДляСохранения;
	КонецЕсли;

	РаспаковыватьEFD = Ложь;
	Если ПараметрыОбработки.Свойство("РаспаковыватьEFD") Тогда
		РаспаковыватьEFD = ПараметрыОбработки.РаспаковыватьEFD;
	КонецЕсли;

	КаталогДляРаспаковкиEFD = "";
	Если ПараметрыОбработки.Свойство("КаталогДляРаспаковкиEFD") Тогда
		КаталогДляРаспаковкиEFD = ПараметрыОбработки.КаталогДляРаспаковкиEFD;
	КонецЕсли;

	ФайлыДляРаспаковкиEFD = "";
	Если ПараметрыОбработки.Свойство("ФайлыДляРаспаковкиEFD") Тогда
		ФайлыДляРаспаковкиEFD = ПараметрыОбработки.ФайлыДляРаспаковкиEFD;
	КонецЕсли;

	УдалитьПослеРаспаковкиEFD = Ложь;
	Если ПараметрыОбработки.Свойство("УдалитьПослеРаспаковкиEFD") Тогда
		УдалитьПослеРаспаковкиEFD = ПараметрыОбработки.УдалитьПослеРаспаковкиEFD;
	КонецЕсли;

КонецПроцедуры // УстановитьПараметрыОбработкиДанных()

// Функция - Возвращает значение параметра обработки данных
// 
// Параметры:
//	ИмяПараметра      - Строка           - имя получаемого параметра
//
// Возвращаемое значение:
//	Произвольный      - значение параметра
//
Функция ПараметрОбработкиДанных(Знач ИмяПараметра) Экспорт
	
	Если НЕ ТипЗнч(ПараметрыОбработки) = Тип("Структура") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если НЕ ПараметрыОбработки.Свойство(ИмяПараметра) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ПараметрыОбработки[ИмяПараметра];
	
КонецФункции // ПараметрОбработкиДанных()

// Процедура - Устанавливает значение параметра обработки
//
// Параметры:
//	ИмяПараметра      - Строка           - имя устанавливаемого параметра
//	Значение          - Произвольный     - новое значение параметра
//
Процедура УстановитьПараметрОбработкиДанных(Знач ИмяПараметра, Знач Значение) Экспорт
	
	Если НЕ ТипЗнч(ПараметрыОбработки) = Тип("Структура") Тогда
		ПараметрыОбработки = Новый Структура();
	КонецЕсли;
	
	ПараметрыОбработки.Вставить(ИмяПараметра, Значение);

	Если ВРег(ИмяПараметра) = ВРег("ИмяПользователя") Тогда
		ИмяПользователя = Значение;
	ИначеЕсли ВРег(ИмяПараметра) = ВРег("ПарольПользователя") Тогда
		ПарольПользователя = Значение;
	ИначеЕсли ВРег(ИмяПараметра) = ВРег("ФильтрПриложений") Тогда
		Если ТипЗнч(Значение) = Тип("Массив") Тогда
			ФильтрПриложений = Значение;
		Иначе
			ФильтрПриложений = СтрРазделить(Значение, "|");
		КонецЕсли;
	ИначеЕсли ВРег(ИмяПараметра) = ВРег("ФильтрВерсий") Тогда
		Если ТипЗнч(Значение) = Тип("Массив") Тогда
			ФильтрВерсий = Значение;
		Иначе
			ФильтрВерсий = СтрРазделить(Значение, "|");
		КонецЕсли;
	ИначеЕсли ВРег(ИмяПараметра) = ВРег("ФильтрВерсийНачинаяСДаты") Тогда
		ФильтрВерсийНачинаяСДаты = Значение;
	ИначеЕсли ВРег(ИмяПараметра) = ВРег("ФильтрВерсийДоДаты") Тогда
		ФильтрВерсийДоДаты = Значение;
	ИначеЕсли ВРег(ИмяПараметра) = ВРег("КаталогДляСохранения") Тогда
		КаталогДляСохранения = Значение;
	ИначеЕсли ВРег(ИмяПараметра) = ВРег("РаспаковыватьEFD") Тогда
		РаспаковыватьEFD = Значение;
	ИначеЕсли ВРег(ИмяПараметра) = ВРег("КаталогДляРаспаковкиEFD") Тогда
		КаталогДляРаспаковкиEFD = Значение;
	ИначеЕсли ВРег(ИмяПараметра) = ВРег("ФайлыДляРаспаковкиEFD") Тогда
		ФайлыДляРаспаковкиEFD = Значение;
	ИначеЕсли ВРег(ИмяПараметра) = ВРег("УдалитьПослеРаспаковкиEFD") Тогда
		УдалитьПослеРаспаковкиEFD = Значение;
	Иначе
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // УстановитьПараметрОбработкиДанных()

// Процедура - устанавливает данные для обработки
//
// Параметры:
//	Данные      - Структура     - значения параметров обработки
//
Процедура УстановитьДанные(Знач ВходящиеДанные) Экспорт
	
КонецПроцедуры // УстановитьДанные()

// Процедура - выполняет обработку данных
//
Процедура ОбработатьДанные() Экспорт
	
	Обозреватель = Новый ОбозревательСайта1С(ИмяПользователя, ПарольПользователя);

	НакопленныеДанные = Обозреватель.ПолучитьСписокПриложений(ФильтрПриложений);

	Для Каждого ТекЭлемент Из НакопленныеДанные Цикл
		ВерсииПриложения = Обозреватель.ПолучитьВерсииПриложения(ТекЭлемент.Путь,
		                                                         ФильтрВерсий,
		                                                         ФильтрВерсийНачинаяСДаты,
		                                                         ФильтрВерсийДоДаты);
		Для Каждого ТекВерсия Из ВерсииПриложения Цикл

			ВидДистрибутива = "Полный";
			СписокСсылок = Обозреватель.ПолучитьСсылкиДляЗагрузки(ТекВерсия.Путь, "Полный дистрибутив$");

			Если СписокСсылок.Количество() = 0 Тогда
				ВидДистрибутива = "Обновление";
				СписокСсылок = Обозреватель.ПолучитьСсылкиДляЗагрузки(ТекВерсия.Путь, "Дистрибутив обновления$");
			КонецЕсли;

			ТекВерсия.Вставить("ВидДистрибутива", ВидДистрибутива);
			
			Для Каждого ТекСсылка Из СписокСсылок Цикл

				ИмяФайлаАрхива = ОбъединитьПути(КаталогДляСохранения,
				                                ТекЭлемент.Идентификатор,
				                                ТекВерсия.Версия,
				                                ТекСсылка.ИмяФайла);

				Лог.Информация("Начало загрузки ""%1"", версия ""%2""-%3 (%4) в файл %5.",
				               ТекЭлемент.Имя,
				               ТекВерсия.Версия,
				               ВидДистрибутива,
				               ТекСсылка.ПутьДляЗагрузки,
				               ИмяФайлаАрхива);

				Распаковщик.ОбеспечитьКаталог(ИмяФайлаАрхива, Истина);

				Обозреватель.ЗагрузитьФайл(ТекСсылка.ПутьДляЗагрузки, ИмяФайлаАрхива);

				Лог.Информация("Загружен файл ""%1""", ИмяФайлаАрхива);

				ФайлАрхива = Новый Файл(ИмяФайлаАрхива);
				
				Распаковщик.РаспаковатьАрхив(ИмяФайлаАрхива, ФайлАрхива.Путь);
				
				ЗаписатьОписаниеВерсииВФайл(ТекЭлемент, ТекВерсия, ФайлАрхива.Путь);

				ФайлыДистрибутива = НайтиФайлы(ФайлАрхива.Путь, "*.*", Истина);

				Лог.Информация("Распакован файл ""%1""", ИмяФайлаАрхива);

				УдалитьФайлы(ИмяФайлаАрхива);
				Лог.Информация("Удален файл ""%1""", ИмяФайлаАрхива);

				ФайлАрхиваEFD = Новый Файл(ОбъединитьПути(ФайлАрхива.Путь, "1cv8.efd"));
				ТекВерсия.Вставить("ЭтоКонфигурация", ФайлАрхиваEFD.Существует());
				
				Если ТекВерсия.ЭтоКонфигурация И РаспаковыватьEFD Тогда

					РаспаковщикРелиза = Новый РаспаковщикРелизов1С();
					РаспаковщикРелиза.УстановитьПараметрыОбработкиДанных(ПараметрыОбработки);
					РаспаковщикРелиза.УстановитьПараметрОбработкиДанных("Приложение_Имя"   , ТекЭлемент.Имя);
					РаспаковщикРелиза.УстановитьПараметрОбработкиДанных("Приложение_Ид"    , ТекЭлемент.Идентификатор);
					РаспаковщикРелиза.УстановитьПараметрОбработкиДанных("Приложение_Версия", ТекВерсия.Версия);
					РаспаковщикРелиза.УстановитьПараметрОбработкиДанных("ПутьКДистрибутиву", ФайлАрхива.Путь);
					РаспаковщикРелиза.ОбработатьДанные();

					Если УдалитьПослеРаспаковкиEFD Тогда
						Для Каждого ТекФайл Из ФайлыДистрибутива Цикл
							УдалитьФайлы(ТекФайл.ПолноеИмя);
						КонецЦикла;
						УдалитьПустыеКаталогиРекурсивно(ФайлАрхива.Путь, КаталогДляСохранения);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;

		ТекЭлемент.Вставить("Версии", ВерсииПриложения);

		ПродолжениеОбработкиДанныхВызовМенеджера(ТекЭлемент);
	КонецЦикла;

	ЗавершениеОбработкиДанныхВызовМенеджера();

КонецПроцедуры // ОбработатьДанные()

Процедура УдалитьПустыеКаталогиРекурсивно(Знач ПутьККаталогу, Знач ДоКаталога = "")

	Если ОбъединитьПути(ПутьККаталогу, "0") = ОбъединитьПути(ДоКаталога, "0") Тогда
		Возврат;
	КонецЕсли;

	Каталог = Новый Файл(ПутьККаталогу);

	Если НЕ (Каталог.Существует() И Каталог.ЭтоКаталог()) Тогда
		Возврат;
	КонецЕсли;

	ФайлыВКаталоге = НайтиФайлы(ПутьККаталогу, "*.*");
	Если ФайлыВКаталоге.Количество() > 0 Тогда
		Возврат;
	КонецЕсли;

	УдалитьФайлы(ПутьККаталогу);

	УдалитьПустыеКаталогиРекурсивно(Каталог.Путь, ДоКаталога);

КонецПроцедуры // УдалитьПустыеКаталогиРекурсивно()

// Функция - возвращает общую для всех файлов часть пути
//
// Параметры:
//  ФайлыВАрхиве     - Массив(Файл)   - список файлов
//
// Возвращаемое значение:
//  Строка          - общая для всех файлов часть пути
//
Функция ОбщийПутьФайлов(МассивФайлов)

	ОбщийПуть = Лев(МассивФайлов[0].ПолноеИмя, СтрДлина(МассивФайлов[0].ПолноеИмя) - СтрДлина(МассивФайлов[0].Имя));
	Для й = 1 По МассивФайлов.ВГраница() Цикл
		Если МассивФайлов[й].Имя = МассивФайлов[й].ПолноеИмя Тогда
			Прервать;
		КонецЕсли;
		Для к = 1 По СтрДлина(ОбщийПуть) Цикл
			Если НЕ Сред(ОбщийПуть, к, 1) = Сред(МассивФайлов[й].ПолноеИмя, к, 1) Тогда
				ОбщийПуть = Лев(ОбщийПуть, к - 1);
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;

	Возврат ОбщийПуть;

КонецФункции // ОбщийПутьФайлов()

// Функция - возвращает текущие результаты обработки
//
// Возвращаемое значение:
//	Произвольный     - результаты обработки данных
//
Функция РезультатОбработки() Экспорт
	
	Возврат НакопленныеДанные;
	
КонецФункции // РезультатОбработки()

// Процедура - выполняет действия при окончании обработки данных
// и оповещает обработку-менеджер о завершении обработки данных
//
Процедура ЗавершениеОбработкиДанных() Экспорт
	
	Лог.Информация("[%1]: Завершение обработки данных.", ТипЗнч(ЭтотОбъект));

	ЗавершениеОбработкиДанныхВызовМенеджера();
	
КонецПроцедуры // ЗавершениеОбработкиДанных()

#КонецОбласти // ПрограммныйИнтерфейс

#Область СлужебныйПрограммныйИнтерфейс

// Функция - возвращает объект управления логированием
//
// Возвращаемое значение:
//  Объект      - объект управления логированием
//
Функция Лог() Экспорт
	
	Возврат Лог;

КонецФункции // Лог()

// Процедура - устанавливает описание команды
//
// Параметры:
//  Команда    - КомандаПриложения     - объект описание команды
//
Процедура ОписаниеКоманды(Команда) Экспорт
	
	Команда.Опция("af app-filter", "", "фильтр приложений")
	       .ТСтрока()
	       .ВОкружении("YARD_RELEASES_APP_FILTER");

	Команда.Опция("vf version-filter", "", "фильтр версий")
	       .ТСтрока()
	       .ВОкружении("YARD_RELEASES_VERSION_FILTER");

	Команда.Опция("vsd version-start-date", "", "фильтр по начальной дате версии (включая)")
	       .ТСтрока()
	       .ВОкружении("YARD_RELEASES_VERSION_START_DATE");

	Команда.Опция("ved version-end-date", "", "фильтр по последней дате версии (включая)")
	       .ТСтрока()
	       .ВОкружении("YARD_RELEASES_VERSION_END_DATE");

	Команда.Опция("p path", "", "каталог для загрузки релизов 1С")
	       .ТСтрока()
	       .ВОкружении("YARD_RELEASES_DOWNLOAD_PATH");

	Команда.Опция("e extract", "", "флаг распаковки загруженного архива")
	       .Флаг();

	Команда.Опция("ep extract-path", "", "каталог для распаковки загруженного архива")
	       .ТСтрока()
	       .ВОкружении("YARD_RELEASES_EXTRACT_PATH");

	Команда.Опция("ef extract-files", "", "список файлов для распаковки из архива дистрибутива, разделенный ""|"",
	                                      |если не указан, то распаковываются все файлы")
	       .ТСтрока()
	       .ВОкружении("YARD_RELEASES_EXTRACT_FILES");

	Команда.Опция("d delete", "", "флаг удаления загруженного архива после распаковки")
	       .Флаг();

КонецПроцедуры // ОписаниеКоманды()

// Процедура - запускает выполнение команды устанавливает описание команды
//
// Параметры:
//  Команда    - КомандаПриложения     - объект  описание команды
//
Процедура ВыполнитьКоманду(Знач Команда) Экспорт

	ВыводОтладочнойИнформации = Команда.ЗначениеОпции("verbose");

	ПараметрыПриложения.УстановитьРежимОтладки(ВыводОтладочнойИнформации);

	УстановитьПараметрОбработкиДанных("ИмяПользователя"          , Команда.ЗначениеОпции("user"));
	УстановитьПараметрОбработкиДанных("ПарольПользователя"       , Команда.ЗначениеОпции("password"));
	УстановитьПараметрОбработкиДанных("ФильтрПриложений"         , Команда.ЗначениеОпции("app-filter"));
	УстановитьПараметрОбработкиДанных("ФильтрВерсий"             , Команда.ЗначениеОпции("version-filter"));

	ВремДата = ДатаИзСтроки(Команда.ЗначениеОпции("version-start-date"));
	УстановитьПараметрОбработкиДанных("ФильтрВерсийНачинаяСДаты" , ВремДата);

	ВремДата = ДатаИзСтроки(Команда.ЗначениеОпции("version-end-date"));
	УстановитьПараметрОбработкиДанных("ФильтрВерсийДоДаты"       , ВремДата);

	УстановитьПараметрОбработкиДанных("КаталогДляСохранения"     , Команда.ЗначениеОпции("path"));
	УстановитьПараметрОбработкиДанных("РаспаковыватьEFD"         , Команда.ЗначениеОпции("extract"));
	УстановитьПараметрОбработкиДанных("КаталогДляРаспаковкиEFD"  , Команда.ЗначениеОпции("extract-path"));
	УстановитьПараметрОбработкиДанных("УдалитьПослеРаспаковкиEFD", Команда.ЗначениеОпции("delete"));

	ВремФайлы = СтрРазделить(Команда.ЗначениеОпции("extract-files"), "|", Ложь);
	УстановитьПараметрОбработкиДанных("ФайлыДляРаспаковкиEFD"    , ВремФайлы);

	ОбработатьДанные();

КонецПроцедуры // ВыполнитьКоманду()

#КонецОбласти // СлужебныйПрограммныйИнтерфейс

#Область СлужебныеПроцедурыВызоваМенеджераОбработкиДанных

// Процедура - выполняет действия обработки элемента данных
// и оповещает обработку-менеджер о продолжении обработки элемента
//
//	Параметры:
//		Элемент    - Произвольный     - Элемент данных для продолжения обработки
//
Процедура ПродолжениеОбработкиДанныхВызовМенеджера(Элемент)
	
	Если МенеджерОбработкиДанных = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	МенеджерОбработкиДанных.ПродолжениеОбработкиДанных(Элемент, Идентификатор);
	
КонецПроцедуры // ПродолжениеОбработкиДанныхВызовМенеджера()

// Процедура - выполняет действия при окончании обработки данных
// и оповещает обработку-менеджер о завершении обработки данных
//
Процедура ЗавершениеОбработкиДанныхВызовМенеджера()
	
	Если МенеджерОбработкиДанных = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	МенеджерОбработкиДанных.ЗавершениеОбработкиДанных(Идентификатор);
	
КонецПроцедуры // ЗавершениеОбработкиДанныхВызовМенеджера()

#КонецОбласти // СлужебныеПроцедурыВызоваМенеджераОбработкиДанных

#Область СлужебныеПроцедурыИФункции

// Процедура - добавляет описание параметра обработки
// 
// Параметры:
//     ОписаниеПараметров     - Структура      - структура описаний параметров
//     Параметр               - Строка         - имя параметра
//     Тип                    - Строка         - список возможных типов параметра
//     Обязательный           - Булево         - Истина - параметр обязателен
//     ЗначениеПоУмолчанию    - Произвольный   - значение параметра по умолчанию
//     Описание               - Строка         - описание параметра
//
Процедура ДобавитьОписаниеПараметра(ОписаниеПараметров
	                              , Параметр
	                              , Тип
	                              , Обязательный = Ложь
	                              , ЗначениеПоУмолчанию = Неопределено
	                              , Описание = "")
	
	Если НЕ ТипЗнч(ОписаниеПараметров) = Тип("Структура") Тогда
		ОписаниеПараметров = Новый Структура();
	КонецЕсли;
	
	ОписаниеПараметра = Новый Структура();
	ОписаниеПараметра.Вставить("Тип"                , Тип);
	ОписаниеПараметра.Вставить("Обязательный"       , Обязательный);
	ОписаниеПараметра.Вставить("ЗначениеПоУмолчанию", ЗначениеПоУмолчанию);
	ОписаниеПараметра.Вставить("Описание"           , Описание);
	
	ОписаниеПараметров.Вставить(Параметр, ОписаниеПараметра);
	
КонецПроцедуры // ДобавитьОписаниеПараметра()

Процедура ЗаписатьОписаниеВерсииВФайл(ОписаниеПриложения, ОписаниеВерсии, Путь)

	Описание = Новый Структура("Идентификатор, Имя, Версия, Дата, ВидДистрибутива, ВерсииДляОбновления");
	Описание.Идентификатор         = ОписаниеПриложения.Идентификатор;
	Описание.Имя                   = ОписаниеПриложения.Имя;
	Описание.Версия                = ОписаниеВерсии.Версия;
	Описание.Дата                  = ОписаниеВерсии.Дата;
	Описание.ВидДистрибутива       = ОписаниеВерсии.ВидДистрибутива;
	Описание.ВерсииДляОбновления   = ОписаниеВерсии.ВерсииДляОбновления;
	
	ПутьКФайлуОписания = ОбъединитьПути(Путь, "description.json");

	Распаковщик.ОбеспечитьКаталог(ПутьКФайлуОписания, Истина);
	
	Запись = Новый ЗаписьJSON();
	
	Запись.ОткрытьФайл(ПутьКФайлуОписания, "UTF-8", , Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Unix, Символы.Таб));
	
	Лог.Информация("[%1]: Запись описания версии в файл ""%2""", ТипЗнч(ЭтотОбъект), ПутьКФайлуОписания);

	Попытка
		ЗаписатьJSON(Запись, Описание);
	Исключение
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ВызватьИсключение ТекстОшибки;
	КонецПопытки;
	
	Запись.Закрыть();

КонецПроцедуры // ЗаписатьОписаниеВерсииВФайл()

Функция ДатаИзСтроки(Знач ДатаСтрокой)

	ВремЧастиДаты = СтрРазделить(ДатаСтрокой, ".");

	КоличествоЧастейДаты = 3;

	Если ВремЧастиДаты.Количество() < КоличествоЧастейДаты Тогда
		Возврат '00010101000000';
	КонецЕсли;

	Попытка
		Если СтрДлина(ВремЧастиДаты[2]) = 4 Тогда
			Возврат Дата(СтрШаблон("%1%2%3%4", ВремЧастиДаты[2], ВремЧастиДаты[1], ВремЧастиДаты[0], "000000"));
		ИначеЕсли СтрДлина(ВремЧастиДаты[2]) = 2 Тогда
			Возврат Дата(СтрШаблон("20%1%2%3%4", ВремЧастиДаты[2], ВремЧастиДаты[1], ВремЧастиДаты[0], "000000"));
		Иначе
			Возврат '00010101000000';
		КонецЕсли;
	Исключение
		Возврат '00010101000000';
	КонецПопытки;

КонецФункции // ДатаИзСтроки()

#КонецОбласти // СлужебныеПроцедурыИФункции

#Область ОбработчикиСобытий

// Процедура - обработчик события "ПриСозданииОбъекта"
//
// Параметры:
//  Менеджер	 - МенеджерОбработкиДанных    - менеджер обработки данных - владелец
// 
// BSLLS:UnusedLocalMethod-off
Процедура ПриСозданииОбъекта(Менеджер = Неопределено)

	УстановитьМенеджерОбработкиДанных(Менеджер);

	Лог = ПараметрыПриложения.Лог();

	УстановитьПараметрыОбработкиДанных(Новый Структура());

	Лог.Информация("[%1]: Инициализирован обработчик", ТипЗнч(ЭтотОбъект));

КонецПроцедуры // ПриСозданииОбъекта()
// BSLLS:UnusedLocalMethod-on

#КонецОбласти // ОбработчикиСобытий

// ----------------------------------------------------------
// This Source Code Form is subject to the terms of the
// Mozilla Public License, v.2.0. If a copy of the MPL
// was not distributed with this file, You can obtain one
// at http://mozilla.org/MPL/2.0/.
// ----------------------------------------------------------

Перем МенеджерОбработкиДанных;  // ВнешняяОбработкаОбъект - обработка-менеджер, вызвавшая данный обработчик
Перем Идентификатор;            // Строка                 - идентификатор обработчика, заданный обработкой-менеджером
Перем ПараметрыОбработки;       // Структура              - параметры обработки
Перем Лог;

Перем ПутьККаталогуКонфигураций; // Строка                 - путь к каталогу содержащему версии конфигурации
                                 //                          для выгрузки в git
Перем РепозитарийГит;            // Строка                 - путь к репозитарию git
Перем ИмяАвтора;                 // Строка                 - имя автора коммита в git
Перем ПочтаАвтора;               // Строка                 - почта автора коммита в git
Перем База_СтрокаСоединения;     // Строка                 - строка соединения служебной базы 1С
                                 //                          для выполнения выгрузки

Перем НакопленныеДанные;        // Массив(Структура)      - результаты обработки данных

#Область ПрограммныйИнтерфейс

// Функция - признак возможности обработки, принимать входящие данные
// 
// Возвращаемое значение:
//	Булево - Истина - обработка может принимать входящие данные для обработки;
//	         Ложь - обработка не принимает входящие данные;
//
Функция ПринимаетДанные() Экспорт
	
	Возврат Ложь;
	
КонецФункции // ПринимаетДанные()

// Функция - признак возможности обработки, возвращать обработанные данные
// 
// Возвращаемое значение:
//	Булево - Истина - обработка может возвращать обработанные данные;
//	         Ложь - обработка не возвращает данные;
//
Функция ВозвращаетДанные() Экспорт
	
	Возврат Истина;
	
КонецФункции // ВозвращаетДанные()

// Функция - возвращает список параметров обработки
// 
// Возвращаемое значение:
//	Структура                                - структура входящих параметров обработки
//      *Тип                    - Строка         - тип параметра
//      *Обязательный           - Булево         - Истина - параметр обязателен
//      *ЗначениеПоУмолчанию    - Произвольный   - значение параметра по умолчанию
//      *Описание               - Строка         - описание параметра
//
Функция ОписаниеПараметров() Экспорт
	
	Параметры = Новый Структура();
	
	ДобавитьОписаниеПараметра(Параметры,
	                          "ПутьККаталогуКонфигураций",
	                          "Строка",
	                          Истина,
	                          "",
	                          "путь к каталогу содержащему версии конфигурации
	                          |для выгрузки в git");

	ДобавитьОписаниеПараметра(Параметры,
	                          "РепозитарийГит",
	                          "Строка",
	                          Истина,
	                          "",
	                          "путь к репозитарию git");

	ДобавитьОписаниеПараметра(Параметры,
	                          "ИмяАвтора",
	                          "Строка",
	                          Ложь,
	                          "",
	                          "имя автора коммита в git");

	ДобавитьОписаниеПараметра(Параметры,
	                          "ПочтаАвтора",
	                          "Строка",
	                          Ложь,
	                          "",
	                          "почта автора коммита в git");

	ДобавитьОписаниеПараметра(Параметры,
	                          "База_СтрокаСоединения",
	                          "Строка",
	                          Ложь,
	                          "",
	                          "строка соединения служебной базы 1С для выполнения выгрузки");

	Возврат Параметры;
	
КонецФункции // ОписаниеПараметров()

// Функция - Возвращает обработку - менеджер
// 
// Возвращаемое значение:
//	ВнешняяОбработкаОбъект - обработка-менеджер
//
Функция МенеджерОбработкиДанных() Экспорт
	
	Возврат МенеджерОбработкиДанных;
	
КонецФункции // МенеджерОбработкиДанных()

// Процедура - Устанавливает обработку - менеджер
//
// Параметры:
//	НовыйМенеджерОбработкиДанных      - ВнешняяОбработкаОбъект - обработка-менеджер
//
Процедура УстановитьМенеджерОбработкиДанных(Знач НовыйМенеджерОбработкиДанных) Экспорт
	
	МенеджерОбработкиДанных = НовыйМенеджерОбработкиДанных;
	
КонецПроцедуры // УстановитьМенеджерОбработкиДанных()

// Функция - Возвращает идентификатор обработчика
// 
// Возвращаемое значение:
//	Строка - идентификатор обработчика
//
Функция Идентификатор() Экспорт
	
	Возврат Идентификатор;
	
КонецФункции // Идентификатор()

// Процедура - Устанавливает идентификатор обработчика
//
// Параметры:
//	НовыйИдентификатор      - Строка - новый идентификатор обработчика
//
Процедура УстановитьИдентификатор(Знач НовыйИдентификатор) Экспорт
	
	Идентификатор = НовыйИдентификатор;
	
КонецПроцедуры // УстановитьИдентификатор()

// Функция - Возвращает значения параметров обработки
// 
// Возвращаемое значение:
//	Структура - параметры обработки
//
Функция ПараметрыОбработкиДанных() Экспорт
	
	Возврат ПараметрыОбработки;
	
КонецФункции // ПараметрыОбработкиДанных()

// Процедура - Устанавливает значения параметров обработки данных
//
// Параметры:
//	НовыеПараметры      - Структура     - значения параметров обработки
//
Процедура УстановитьПараметрыОбработкиДанных(Знач НовыеПараметры) Экспорт
	
	ПараметрыОбработки = НовыеПараметры;
	
	ПутьККаталогуКонфигураций = "";
	Если ПараметрыОбработки.Свойство("ПутьККаталогуКонфигураций") Тогда
		ПутьККаталогуКонфигураций = ПараметрыОбработки.ПутьККаталогуКонфигураций;
	КонецЕсли;

	РепозитарийГит = "";
	Если ПараметрыОбработки.Свойство("РепозитарийГит") Тогда
		РепозитарийГит = ПараметрыОбработки.РепозитарийГит;
	КонецЕсли;

	ИмяАвтора = "1c";
	Если ПараметрыОбработки.Свойство("ИмяАвтора") Тогда
		ИмяАвтора = ПараметрыОбработки.ИмяАвтора;
	КонецЕсли;

	ПочтаАвтора = "1c@1c.ru";
	Если ПараметрыОбработки.Свойство("ПочтаАвтора") Тогда
		ПочтаАвтора = ПараметрыОбработки.ПочтаАвтора;
	КонецЕсли;

	База_СтрокаСоединения = "";
	Если ПараметрыОбработки.Свойство("База_СтрокаСоединения") Тогда
		База_СтрокаСоединения = ПараметрыОбработки.База_СтрокаСоединения;
	КонецЕсли;

	КонецПроцедуры // УстановитьПараметрыОбработкиДанных()

// Функция - Возвращает значение параметра обработки данных
// 
// Параметры:
//	ИмяПараметра      - Строка           - имя получаемого параметра
//
// Возвращаемое значение:
//	Произвольный      - значение параметра
//
Функция ПараметрОбработкиДанных(Знач ИмяПараметра) Экспорт
	
	Если НЕ ТипЗнч(ПараметрыОбработки) = Тип("Структура") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если НЕ ПараметрыОбработки.Свойство(ИмяПараметра) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ПараметрыОбработки[ИмяПараметра];
	
КонецФункции // ПараметрОбработкиДанных()

// Процедура - Устанавливает значение параметра обработки
//
// Параметры:
//	ИмяПараметра      - Строка           - имя устанавливаемого параметра
//	Значение          - Произвольный     - новое значение параметра
//
Процедура УстановитьПараметрОбработкиДанных(Знач ИмяПараметра, Знач Значение) Экспорт
	
	Если НЕ ТипЗнч(ПараметрыОбработки) = Тип("Структура") Тогда
		ПараметрыОбработки = Новый Структура();
	КонецЕсли;
	
	ПараметрыОбработки.Вставить(ИмяПараметра, Значение);

	Если ВРег(ИмяПараметра) = ВРег("ПутьККаталогуКонфигураций") Тогда
		ПутьККаталогуКонфигураций = Значение;
	ИначеЕсли ВРег(ИмяПараметра) = ВРег("РепозитарийГит") Тогда
		РепозитарийГит = Значение;
	ИначеЕсли ВРег(ИмяПараметра) = ВРег("ИмяАвтора") Тогда
		ИмяАвтора = Значение;
	ИначеЕсли ВРег(ИмяПараметра) = ВРег("ПочтаАвтора") Тогда
		ПочтаАвтора = Значение;
	ИначеЕсли ВРег(ИмяПараметра) = ВРег("База_СтрокаСоединения") Тогда
		База_СтрокаСоединения = Значение;
	Иначе
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // УстановитьПараметрОбработкиДанных()

// Процедура - устанавливает данные для обработки
//
// Параметры:
//	Данные      - Структура     - значения параметров обработки
//
Процедура УстановитьДанные(Знач ВходящиеДанные) Экспорт
	
КонецПроцедуры // УстановитьДанные()

// Процедура - выполняет обработку данных
//
Процедура ОбработатьДанные() Экспорт

	ФайлыОписанийВерсий = НайтиФайлы(ПутьККаталогуКонфигураций, "description.json", Истина);

	ЧтениеОписания = Новый ЧтениеJSON();

	ВерсииДляОбработки = Новый Массив();

	Для Каждого ТекФайл Из ФайлыОписанийВерсий Цикл

		ЧтениеОписания.ОткрытьФайл(ТекФайл.ПолноеИмя, КодировкаТекста.UTF8);
	
		ОписаниеВерсии = ПрочитатьJSON(ЧтениеОписания, Ложь, , ФорматДатыJSON.ISO);

		ЧтениеОписания.Закрыть();

		ФайлКонфигурации = Новый Файл(ОбъединитьПути(ТекФайл.Путь, "1cv8.cf"));

		Если НЕ ФайлКонфигурации.Существует() Тогда
			Продолжить;
		КонецЕсли;

		ОписаниеВерсии.Вставить("КаталогВерсии", ТекФайл.Путь);

		ВерсииДляОбработки.Добавить(ОписаниеВерсии);
	КонецЦикла;

	СортироватьОписанияВерсийПоНомеру(ВерсииДляОбработки);

	ФайлОписанияПоследнейВерсии = Новый Файл(ОбъединитьПути(РепозитарийГит, "description.json"));

	ДатаПоследнейВерсии = ВерсииДляОбработки[0].Дата - 1;

	Если ФайлОписанияПоследнейВерсии.Существует() Тогда
		ЧтениеОписания.ОткрытьФайл(ФайлОписанияПоследнейВерсии.ПолноеИмя, КодировкаТекста.UTF8);
	
		ОписаниеВерсииВГит = ПрочитатьJSON(ЧтениеОписания, Ложь, , ФорматДатыJSON.ISO);

		ДатаПоследнейВерсии = ОписаниеВерсииВГит.Дата;
	КонецЕсли;

	ЧтениеОписания.Закрыть();

	Для Каждого ТекОписание Из ВерсииДляОбработки Цикл

		Если ТекОписание.Дата <= ДатаПоследнейВерсии Тогда
			Продолжить;
		КонецЕсли;

		ДатаКоммита = ДатаPOSIX(ТекОписание.Дата);
		СообщениеКоммита = СтрШаблон("Обновление версии конфигурации поставщика на %1", ТекОписание.Версия);

		Выгрузка = Новый ВыгрузкаКонфигурацииВГит();
		Выгрузка.УстановитьПараметрОбработкиДанных("ПутьККонфигурации"    , ОбъединитьПути(ТекОписание.КаталогВерсии, "1cv8.cf"));
		Выгрузка.УстановитьПараметрОбработкиДанных("РепозитарийГит"       , РепозитарийГит);
		Выгрузка.УстановитьПараметрОбработкиДанных("ИмяАвтора"            , ИмяАвтора);
		Выгрузка.УстановитьПараметрОбработкиДанных("ПочтаАвтора"          , ПочтаАвтора);
		Выгрузка.УстановитьПараметрОбработкиДанных("ДатаКоммита"          , ДатаКоммита);
		Выгрузка.УстановитьПараметрОбработкиДанных("СообщениеКоммита"     , СообщениеКоммита);
		Выгрузка.УстановитьПараметрОбработкиДанных("База_СтрокаСоединения", База_СтрокаСоединения);
		Выгрузка.ОбработатьДанные();
		
		ПродолжениеОбработкиДанныхВызовМенеджера(ТекОписание);
	КонецЦикла;

	ЗавершениеОбработкиДанныхВызовМенеджера();

КонецПроцедуры // ОбработатьДанные()

Функция ФорматДвузначноеЧисло(ЗначениеЧисло)
	ЧислоСтрокой = Строка(ЗначениеЧисло);
	Если СтрДлина(ЧислоСтрокой) < 2 Тогда
		ЧислоСтрокой = "0" + ЧислоСтрокой;
	КонецЕсли;
	
	Возврат ЧислоСтрокой;
КонецФункции

Функция ДатаPOSIX(Знач Дата)
	
	Возврат "" + Год(Дата) + "-" + ФорматДвузначноеЧисло(Месяц(Дата)) + "-" + ФорматДвузначноеЧисло(День(Дата)) + " "
	+ ФорматДвузначноеЧисло(Час(Дата)) + ":" + ФорматДвузначноеЧисло(Минута(Дата))
	+ ":" + ФорматДвузначноеЧисло(Секунда(Дата));
	
КонецФункции // ДатаPOSIX()

// Процедура - сортирует массив номеров версий согласно соглашению SEMVER
//
// Параметры:
//	МассивВерсий     - Массив(Строка)     - массив номеров версий
//	Порядок          - Строка             - принимает значение "ВОЗР" или "УБЫВ"
//
Процедура СортироватьВерсии(МассивВерсий, Порядок = "ВОЗР")

	МажорныеВерсии = Новый Соответствие();
	МассивМажорныхВерсий = Новый Массив();
	Для й = 0 По МассивВерсий.ВГраница() Цикл
		МажорнаяВерсия = СокрЛП(Лев(МассивВерсий[й], СтрНайти(МассивВерсий[й], ".") - 1)) + ".0.0";
		Если МажорныеВерсии[МажорнаяВерсия] = Неопределено Тогда
			МажорныеВерсии.Вставить(МажорнаяВерсия, Новый Массив());
			МассивМажорныхВерсий.Добавить(МажорнаяВерсия);
		КонецЕсли;
		МажорныеВерсии[МажорнаяВерсия].Добавить(Сред(МассивВерсий[й], СтрНайти(МассивВерсий[й], ".") + 1));
	КонецЦикла;

	Версии.СортироватьВерсии(МассивМажорныхВерсий, Порядок);

	МассивВерсий = Новый Массив();

	Для Каждого ТекВерсия Из МассивМажорныхВерсий Цикл
		МинорныеВерсии = МажорныеВерсии[ТекВерсия];
		Версии.СортироватьВерсии(МинорныеВерсии, Порядок);
		Для Каждого ТекЗначение Из МинорныеВерсии Цикл
			МажорнаяВерсия = СокрЛП(Лев(ТекВерсия, СтрНайти(ТекВерсия, ".") - 1));
			МассивВерсий.Добавить(СтрШаблон("%1.%2", МажорнаяВерсия, ТекЗначение));
		КонецЦикла;
	КонецЦикла;

КонецПроцедуры // СортироватьВерсии()

// Процедура - сортирует массив описаний версий по номерам версий согласно соглашению SEMVER
//
// Параметры:
//	ОписанияВерсий         - Массив(Структура)   - массив описаний версий для сортировки
//      * Версия               - Строка              - номер версии
//      * Дата                 - Дата                - дата версии
//      * Путь                 - Строка              - относительный путь к странице версии
//      * ВерсииДляОбновления  - Массив              - список версий для обновления
//	Порядок                - Строка              - принимает значение "ВОЗР" или "УБЫВ"
//
Процедура СортироватьОписанияВерсийПоНомеру(ОписанияВерсий, Порядок = "ВОЗР")

	СоответствиеОписаний = Новый Соответствие();

	МассивВерсий = Новый Массив();

	Для Каждого ТекОписание Из ОписанияВерсий Цикл
		СоответствиеОписаний.Вставить(ТекОписание.Версия, ТекОписание);
		МассивВерсий.Добавить(ТекОписание.Версия);
	КонецЦикла;

	СортироватьВерсии(МассивВерсий, Порядок);

	ОписанияВерсий = Новый Массив();

	Для Каждого ТекВерсия Из МассивВерсий Цикл
		ОписанияВерсий.Добавить(СоответствиеОписаний[ТекВерсия]);
	КонецЦикла;

КонецПроцедуры // СортироватьОписанияВерсийПоНомеру()

Функция РезультатОбработки() Экспорт
	
	Возврат НакопленныеДанные;
	
КонецФункции // РезультатОбработки()

// Процедура - выполняет действия при окончании обработки данных
// и оповещает обработку-менеджер о завершении обработки данных
//
Процедура ЗавершениеОбработкиДанных() Экспорт
	
	Лог.Информация("[%1]: Завершение обработки данных.", ТипЗнч(ЭтотОбъект));

	ЗавершениеОбработкиДанныхВызовМенеджера();
	
КонецПроцедуры // ЗавершениеОбработкиДанных()

#КонецОбласти // ПрограммныйИнтерфейс

#Область СлужебныйПрограммныйИнтерфейс

// Функция - возвращает объект управления логированием
//
// Возвращаемое значение:
//  Объект      - объект управления логированием
//
Функция Лог() Экспорт
	
	Возврат Лог;

КонецФункции // Лог()

// Процедура - устанавливает описание команды
//
// Параметры:
//  Команда    - КомандаПриложения     - объект описание команды
//
Процедура ОписаниеКоманды(Команда) Экспорт
	
	Команда.Опция("p path", "", "путь к каталогу содержащему версии конфигурации
	                            |для выгрузки в git")
	       .ТСтрока()
	       .ВОкружении("YARD_CF_PATH");

	Команда.Опция("g git-path", "", "путь к репозитарию git")
	       .ТСтрока()
	       .ВОкружении("YARD_GIT_PATH");

	Команда.Опция("a git-author", "1c", "имя автора коммита в git")
	       .ТСтрока()
	       .ВОкружении("YARD_GIT_AUTHOR");

	Команда.Опция("e git-author-email", "1c@1c.ru", "почта автора коммита в git")
	       .ТСтрока()
	       .ВОкружении("YARD_GIT_AUTHOR_EMAIL");

	Команда.Опция("C ibconnection", "", "строка подключения к служебной базе 1С для выполнения обновления")
	       .ТСтрока()
	       .ВОкружении("YARD_IB_CONNECTION");

КонецПроцедуры // ОписаниеКоманды()

// Процедура - запускает выполнение команды устанавливает описание команды
//
// Параметры:
//  Команда    - КомандаПриложения     - объект  описание команды
//
Процедура ВыполнитьКоманду(Знач Команда) Экспорт

	ВыводОтладочнойИнформации = Команда.ЗначениеОпции("verbose");

	ПараметрыПриложения.УстановитьРежимОтладки(ВыводОтладочнойИнформации);

	УстановитьПараметрОбработкиДанных("ПутьККаталогуКонфигураций", Команда.ЗначениеОпции("path"));
	УстановитьПараметрОбработкиДанных("РепозитарийГит"           , Команда.ЗначениеОпции("git-path"));
	УстановитьПараметрОбработкиДанных("ИмяАвтора"                , Команда.ЗначениеОпции("git-author"));
	УстановитьПараметрОбработкиДанных("ПочтаАвтора"              , Команда.ЗначениеОпции("git-author-email"));
	УстановитьПараметрОбработкиДанных("База_СтрокаСоединения"    , Команда.ЗначениеОпции("ibconnection"));

	ОбработатьДанные();

КонецПроцедуры // ВыполнитьКоманду()

#КонецОбласти // СлужебныйПрограммныйИнтерфейс

#Область СлужебныеПроцедурыВызоваМенеджераОбработкиДанных

// Процедура - выполняет действия обработки элемента данных
// и оповещает обработку-менеджер о продолжении обработки элемента
//
//	Параметры:
//		Элемент    - Произвольный     - Элемент данных для продолжения обработки
//
Процедура ПродолжениеОбработкиДанныхВызовМенеджера(Элемент)
	
	Если МенеджерОбработкиДанных = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	МенеджерОбработкиДанных.ПродолжениеОбработкиДанных(Элемент, Идентификатор);
	
КонецПроцедуры // ПродолжениеОбработкиДанныхВызовМенеджера()

// Процедура - выполняет действия при окончании обработки данных
// и оповещает обработку-менеджер о завершении обработки данных
//
Процедура ЗавершениеОбработкиДанныхВызовМенеджера()
	
	Если МенеджерОбработкиДанных = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	МенеджерОбработкиДанных.ЗавершениеОбработкиДанных(Идентификатор);
	
КонецПроцедуры // ЗавершениеОбработкиДанныхВызовМенеджера()

#КонецОбласти // СлужебныеПроцедурыВызоваМенеджераОбработкиДанных

#Область СлужебныеПроцедурыИФункции

// Процедура - добавляет описание параметра обработки
// 
// Параметры:
//     ОписаниеПараметров     - Структура      - структура описаний параметров
//     Параметр               - Строка         - имя параметра
//     Тип                    - Строка         - список возможных типов параметра
//     Обязательный           - Булево         - Истина - параметр обязателен
//     ЗначениеПоУмолчанию    - Произвольный   - значение параметра по умолчанию
//     Описание               - Строка         - описание параметра
//
Процедура ДобавитьОписаниеПараметра(ОписаниеПараметров
	                              , Параметр
	                              , Тип
	                              , Обязательный = Ложь
	                              , ЗначениеПоУмолчанию = Неопределено
	                              , Описание = "")
	
	Если НЕ ТипЗнч(ОписаниеПараметров) = Тип("Структура") Тогда
		ОписаниеПараметров = Новый Структура();
	КонецЕсли;
	
	ОписаниеПараметра = Новый Структура();
	ОписаниеПараметра.Вставить("Тип"                , Тип);
	ОписаниеПараметра.Вставить("Обязательный"       , Обязательный);
	ОписаниеПараметра.Вставить("ЗначениеПоУмолчанию", ЗначениеПоУмолчанию);
	ОписаниеПараметра.Вставить("Описание"           , Описание);
	
	ОписаниеПараметров.Вставить(Параметр, ОписаниеПараметра);
	
КонецПроцедуры // ДобавитьОписаниеПараметра()

#КонецОбласти // СлужебныеПроцедурыИФункции

#Область ОбработчикиСобытий

// Процедура - обработчик события "ПриСозданииОбъекта"
//
// Параметры:
//  Менеджер	 - МенеджерОбработкиДанных    - менеджер обработки данных - владелец
// 
// BSLLS:UnusedLocalMethod-off
Процедура ПриСозданииОбъекта(Менеджер = Неопределено)

	УстановитьМенеджерОбработкиДанных(Менеджер);

	Лог = ПараметрыПриложения.Лог();

	Лог.Информация("[%1]: Инициализирован обработчик", ТипЗнч(ЭтотОбъект));

КонецПроцедуры // ПриСозданииОбъекта()
// BSLLS:UnusedLocalMethod-on

#КонецОбласти // ОбработчикиСобытий
